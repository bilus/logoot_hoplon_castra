;; ns tailrecursion.hoplon.app-pages._index_DOT_html
(page "index.html"
  (:require
    [tailrecursion.hoplon.reload :refer [reload-all]]
    [logoot.document :as ld]
    [logoot.editors.code-mirror :as cm]
    [logoot.pid :as pid]
    [logoot.edn :as edn]
    [dly.core.debug :as debug]
    [logoot-hoplon-castra.rpc :as rpc]))

(reload-all 1000)

(def document1 (atom (ld/new-document)))
(def document2 (atom (ld/new-document)))
(def editors (atom {})) ; Ugh!
(def initialized (atom false))


(declare clear-all)

(html
  (head
    (title "XYZ")
    (link {:href "codemirror.css" :rel "stylesheet"})
    (script {:src "codemirror.js"}))
  (body
    (h1 :on-load #(js/alert "eu") "Hello, World!")
    (p (button :on-click #(clear-all) "Clear!"))
    (textarea :id "code1" :name "code1" "")
    (textarea :id "code2" :name "code2" "")
    (p (text "ETAG: ~{rpc/etag}"))))

(defn some? 
  [x]
  (not (nil? x)))

(defn pos->vec 
  [pos]
  [(.-line pos) (.-ch pos)])

(defn pos
  [change field]
  (-> change
      (get field)
      pos->vec))

(defn get-document1
  []
  @document1)

(defn get-document2
  []
  @document2)

(defn merge-changes
  [editor ignore-site document changes]
  (let [inserts (:insert changes)
        document' (ld/merge-inserts @document inserts)
        deletes (:delete changes)
        ignore? (fn [pid] (and 
                            (some? ignore-site) 
                            (= (pid/pid-site pid) ignore-site)))]
    (when (seq inserts)
      (doseq [[pid content] inserts
              :let [[line ch] (cm/pid->pos document' pid)]
              :when (not (ignore? pid))]
        (.replaceRange editor content (CodeMirror.Pos. line ch) nil "+merge")))
    
    (when (seq deletes)
      (let [document'' (loop [[pid & deletes'] deletes d document']
                         (if pid
                          (let [[line ch] (cm/pid->pos d pid)
                                [line' ch'] (cm/pid->pos d (ld/next-pid d pid))]
                            (when-not (ignore? pid)
                              (.replaceRange editor "" (CodeMirror.Pos. line ch) (CodeMirror.Pos. line' ch') "+merge"))
                            (recur deletes' (ld/merge-deletes d [pid])))
                          d))]
      (reset! document document'')))

    
    (println "document..." (ld/display @document))))

(defn handle-change 
  [document [new-document changes]]
  (reset! document new-document)
  (rpc/push-changes (edn/changes->map changes)))

(defn set-up-editor
  [dom-id document site]
  (let [editor (js/CodeMirror.fromTextArea (by-id dom-id) (js-obj 
                                                            :lineNumbers true 
                                                            :lineWrapping true))]
    (swap! editors #(assoc % dom-id editor))
    (.on editor "change" (fn [cm change]
                           (let [change' (js->clj change)]
                             (when-not (= "+merge" (change' "origin"))
                               (ld/with-site-fn site
                                #(if-let [text (change' "text")]
                                 (handle-change document (cm/insert @document
                                                            (pos change' "from") 
                                                            (pos change' "to")
                                                            text))
                                 
                                 (handle-change document (cm/delete @document
                                                            (pos change' "from")
                                                            (pos change' "to")))))))))))

(with-init! 
  (with-timeout 1000 ; FIXME use document ready
                (set-up-editor "code1" document1 1)
                (set-up-editor "code2" document2 2)
                (rpc/init)))

(defc= changes (do
                (let [changes (map edn/map->changes (get rpc/recent-update :changes))
                      ignore-site-1 (when @initialized 1)
                      ignore-site-2 (when @initialized 2)]
                  (doseq [change changes]
                    (merge-changes (get @editors "code1") ignore-site-1 document1 change)
                    (merge-changes (get @editors "code2") ignore-site-2 document2 change)
                    (reset! initialized true)))))

(defn clear-all 
  []
  (rpc/clear!)
  ; (.setValue (@editors "code1") "")
  ; (.setValue (@editors "code2") "")
  ; (reset! document1 (ld/new-document))
  ; (reset! document2 (ld/new-document))
  )